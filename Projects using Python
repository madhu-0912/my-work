#if it is showing any file missing error then run:"conda install -c "conda-forge/label/cf201901" basemap-data-hires"
#conda install basemap -c conda-forge
#conda install -c conda-forge basemap-data-hires
#Importing required packages
import warnings
warnings.filterwarnings('ignore')
import os
import matplotlib.pyplot as plt
import pandas as pd
import glob
import numpy as np
import matplotlib
from mpl_toolkits.basemap import Basemap

geo_data = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/geo-data.csv')
zip_94017 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/94017.csv')
zip_94105 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/94105.csv')
zip_94127_94132 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/94127&94132.csv')
zip_10001 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/10001.csv')
zip_10006 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/10006.csv')
zip_10011 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/10011.csv')
zip_10017 = pd.read_csv('/Users/nekki/Desktop/BAN 601/Project/10017.csv')



frames = [zip_94017, zip_94105, zip_94127_94132, zip_10001, zip_10006, zip_10011, zip_10017]
result = pd.concat(frames)                                                   #Concatinate 8 zipcodes into a dataframe 
result['name'] = result['name'].astype('str')                                #changing type of the column 'name' from int to string 

df2 = result.drop(result.columns[[11, 13, 25]],axis = 1)                     


# Merging Gio data and zipcodes data with respect to zipcodes
df3 = pd.merge(geo_data, df2, left_on='zipcode', right_on='name')
df3['datetime']= pd.to_datetime(df3['datetime'])                             #Converting column 'datetime' to datetime format
df3['month'] = df3.datetime.dt.month                                         #seperating months from datetime(can be seen in last column)
df3

############################### STACKED BAR CHART OF MAX TEMPERATURE FOR EACH ZIPCODE ################################

plot_df = df3.groupby(by = ['zipcode','month'],as_index= False)['tempmax'].max()    #Grouping the data and publishing monthly Max Temperetures with respect to zipcode
plot_df

b=plot_df.pivot(index = 'month' , columns = 'zipcode' , values = 'tempmax')   # reordering the Dataframe to Plot a stacked bar graph
b

b.plot(kind='bar', stacked=True,figsize=(20,10))                      # Plotting a bar Graph (x - axis: Months , y - axis: Temperatures)
plt.grid()
plt.xlabel('Months',fontweight='bold', fontsize='15', horizontalalignment='center')
plt.ylabel('Temperatures',fontweight='bold', fontsize='15', horizontalalignment='center')
plt.title('Maximum Temperatures',fontweight='bold', color = 'Green', fontsize='25', horizontalalignment='center')

################################### LINE GRAPH OF AVERAGE TEMP OF EACH ZIP CODE ######################################

plot_avg = df3.groupby(by = ['zipcode','month','state'],as_index= False)['temp'].mean()    ##Grouping the data and publishing monthly Average Temperetures with respect to zipcode
plot_avg

avg=plot_avg.pivot(index = 'month' , columns = 'zipcode' , values = 'temp')   # reordering the Dataframe to Plot a Line graph
avg

avg.plot(kind='line',figsize=(20,10))                                        # Plotting a line Graph (x - axis: )
plt.xlabel('Months',fontweight='bold', fontsize='15', horizontalalignment='center')
plt.xticks(range(0,13))
plt.yticks(range(20,91,10))
plt.grid()
plt.ylabel('Temperatures',fontweight='bold', fontsize='15', horizontalalignment='center')
plt.title('Average Temperatures',fontweight='bold', color = 'Green', fontsize='25', horizontalalignment='center')





######################## HEATED MAP MAX TEMPERATURES OF EACH ZIPCODE IN SAN FRANCISCO REGION #########################

df4 = df3.groupby(by = ['zipcode','county'],as_index= False)['tempmax'].max()   # calculating Maximum temperatures of each Zipcodes
df4

df5=df4.loc[(df4['county'] == 'San Francisco')]              # Identifing the Max Temp of San Francisco county zipcodes
df5

df5['lat'] = pd.Series([37.7749 , 37.7346 , 37.7181],index=[5,6,7])             # Longitude and Latitude values for the above identified zipcodes to plot a Heated Map
df5['long'] = pd.Series([-122.4194 , -122.4637 , -122.4863],index = [5,6,7])


fig = plt.figure(figsize=(10,10))
m = Basemap(projection='lcc', resolution='f',llcrnrlat=36.5,urcrnrlat=38.5,
            llcrnrlon=-123.5, urcrnrlon=-122,lat_0=37.7749, lon_0=-122.97,width=10E6, height=10.2E6,)

m.shadedrelief()                            #display shaded relief image
m.drawcoastlines(color='gray')              #draw coastlines
m.drawcountries(color='gray')               #Draw country boundaries.
m.drawstates(color='gray')                  #Draw state boundaries in Americas.

m.drawcounties(color='black')               #Draw county boundaries in US


m.scatter(df5['long'].values, df5['lat'].values, latlon=True,
          c=df5['tempmax'].values*5, s= df5['tempmax'].values*5,
          cmap='Reds', alpha=0.5)           #Plot points with markers on the map
plt.colorbar(label=r'temparature(°F)')      #Add a colorbar to a plot.
plt.clim(85,90)                             #Set the color limits of the current image.

# make legend with dummy points
for a in df5["tempmax"]:                     # To print the values on map
    plt.scatter([], [], c='k', alpha=0.5, s=a,
                label=str(a) + ' °F')
plt.legend(scatterpoints=1, frameon=False,
           labelspacing=1, loc='lower left');
plt.title('San Fransisco city',fontsize=20)  #Place a legend on the Axes.
plt.show()                                   #Display all open figures.

#if it is showing any file missing error then run:"conda install -c "conda-forge/label/cf201901" basemap-data-hires"

